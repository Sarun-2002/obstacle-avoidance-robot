import RPi.GPIO as GPIO
import time
import cv2
import paho.mqtt.client as mqtt
from flask import Flask, Response

# GPIO Pin setup
TRIG = 23
ECHO = 24
MOTOR_LEFT_FWD = 17
MOTOR_LEFT_BWD = 18
MOTOR_RIGHT_FWD = 22
MOTOR_RIGHT_BWD = 27

GPIO.setmode(GPIO.BCM)
GPIO.setup(TRIG, GPIO.OUT)
GPIO.setup(ECHO, GPIO.IN)
GPIO.setup(MOTOR_LEFT_FWD, GPIO.OUT)
GPIO.setup(MOTOR_LEFT_BWD, GPIO.OUT)
GPIO.setup(MOTOR_RIGHT_FWD, GPIO.OUT)
GPIO.setup(MOTOR_RIGHT_BWD, GPIO.OUT)

# Flask app for video streaming
app = Flask(__name__)

# MQTT Setup
MQTT_BROKER = "broker.hivemq.com"
MQTT_TOPIC = "robot/control"

def on_connect(client, userdata, flags, rc):
    print("Connected to MQTT Broker")
    client.subscribe(MQTT_TOPIC)

def on_message(client, userdata, msg):
    command = msg.payload.decode()
    if command == "forward":
        move_forward()
    elif command == "backward":
        move_backward()
    elif command == "left":
        turn_left()
    elif command == "right":
        turn_right()
    elif command == "stop":
        stop_motors()

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect(MQTT_BROKER, 1883, 60)
client.loop_start()

def distance():
    GPIO.output(TRIG, True)
    time.sleep(0.00001)
    GPIO.output(TRIG, False)
    
    while GPIO.input(ECHO) == 0:
        pulse_start = time.time()
    
    while GPIO.input(ECHO) == 1:
        pulse_end = time.time()
    
    pulse_duration = pulse_end - pulse_start
    distance = pulse_duration * 17150
    return round(distance, 2)

def move_forward():
    GPIO.output(MOTOR_LEFT_FWD, True)
    GPIO.output(MOTOR_RIGHT_FWD, True)

def move_backward():
    GPIO.output(MOTOR_LEFT_BWD, True)
    GPIO.output(MOTOR_RIGHT_BWD, True)

def turn_left():
    GPIO.output(MOTOR_LEFT_FWD, False)
    GPIO.output(MOTOR_RIGHT_FWD, True)

def turn_right():
    GPIO.output(MOTOR_LEFT_FWD, True)
    GPIO.output(MOTOR_RIGHT_FWD, False)

def stop_motors():
    GPIO.output(MOTOR_LEFT_FWD, False)
    GPIO.output(MOTOR_RIGHT_FWD, False)
    GPIO.output(MOTOR_LEFT_BWD, False)
    GPIO.output(MOTOR_RIGHT_BWD, False)

def video_stream():
    camera = cv2.VideoCapture(0)
    while True:
        success, frame = camera.read()
        if not success:
            break
        _, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

@app.route('/video_feed')
def video_feed():
    return Response(video_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == "__main__":
    try:
        while True:
            if distance() < 20:
                stop_motors()
                time.sleep(1)
                move_backward()
                time.sleep(1)
                turn_left()
                time.sleep(1)
                stop_motors()
    except KeyboardInterrupt:
        GPIO.cleanup()
